# -*- coding: utf-8 -*-
"""CatVsDog_BharatIntern.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AF9h7a6uxKnl9JaE7FB4j4HNi050URG7
"""

import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import cv2, os
from tqdm.auto import tqdm
import shutil

#Import Kaggle json file
! mkdir -p /root/.kaggle
! mv kaggle.json /root/.kaggle
import kaggle

# Download the kaggle cats and dogs dataset
!kaggle competitions download -c dogs-vs-cats

# Unzip the downloaded file
! unzip -q dogs-vs-cats.zip
! unzip -q train.zip

#Remove test dataset
! rm -rf sampleSubmission.csv test1.zip dogs-vs-cats.zip

# create folders for seprating cats and dogs images
os.mkdir("images")
os.mkdir("images/cat")
os.mkdir("images/dog")

# copy the cats and dog images to there respective folders using shutil
source =   "train/"
dest_cat = "images/cat/"
dest_dog = "images/dog/"

for imageName in tqdm(os.listdir(source)):
  if imageName.startswith("cat"):
    shutil.copy(source + imageName, dest_cat)
  elif imageName.startswith("dog"):
    shutil.copy(source + imageName, dest_dog)

len(os.listdir(dest_dog)), len(os.listdir(dest_cat))

# creating test folder
os.mkdir("test")

# move rendom images to Test Dataset -

test_dog = np.random.choice(os.listdir(dest_dog), 500, replace=False)
test_cat = np.random.choice(os.listdir(dest_cat), 500, replace=False)

for imageName in test_dog:
  shutil.move(dest_dog + imageName, "test")
for imageName in test_cat:
  shutil.move(dest_cat + imageName, "test")

len(os.listdir("test"))

#Image data generator
idg = tf.keras.preprocessing.image.ImageDataGenerator(horizontal_flip=True,
                                                      rotation_range=40,
                                                      rescale=1/255.0,
                                                      validation_split=0.1)

batch_size = 64

train_idg = idg.flow_from_directory("images", target_size=(150, 150),
                                    batch_size = batch_size,
                                    subset="training",)

val_idg = idg.flow_from_directory("images", target_size=(150, 150),
                                  batch_size = batch_size,
                                  subset="validation")

#del model

# Modelling -
model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Input((150,150,3), name="Input"))
# 1st chunk
model.add(tf.keras.layers.Conv2D(filters=16,
                                 kernel_size=(3,3),
                                 padding="valid",
                                 strides=(1,1),
                                 activation="relu",
                                 name="Conv1", ))
# (150, 150, 3), (3,3) --> (150 - 3 + 1)/1 = 148 = (148, 148, 16)
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2),
                                       strides =(2,2),
                                       padding="valid",
                                       name="Pool1"))
# 148 --> 74 ==> (74, 74, 16)
# 2nd Chunk
model.add(tf.keras.layers.Conv2D(filters=32,
                                 kernel_size=(3,3),
                                 padding="valid",
                                 strides=(1,1),
                                 activation="relu",
                                 name="Conv2"))
# (74, 74, 16) , (3,3) --> (74 - 3 + 1)/1 = 72 = (72, 72, 32)
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2),
                                       strides=(2,2),
                                       padding="valid",
                                       name="Pool2"))
# (72, 72, 32) --> 36 = (36, 36, 32)
# 3rd Chunk
model.add(tf.keras.layers.Conv2D(filters=32,
                                 kernel_size=(3,3),
                                 padding="valid",
                                 strides=(1,1),
                                 activation="relu",
                                 name="Conv3"))
# (36, 36, 32), (3,3) --> 36 -3 + 1 = 34 = (34, 34, 32)
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2),
                                       strides=(2,2),
                                       padding="valid",
                                       name="Pool3"))
#4th Chunk
model.add(tf.keras.layers.Conv2D(filters=32,
                                 kernel_size=(3,3),
                                 padding="valid",
                                 strides=(1,1),
                                 activation="relu",
                                 name="Conv4"))
# (36, 36, 32), (3,3) --> 36 -3 + 1 = 34 = (34, 34, 32)
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2),
                                       strides=(2,2),
                                       padding="valid",
                                       name="Pool4"))
# (34, 34, 32) --> (17, 17, 32)
model.add(tf.keras.layers.Flatten(name="Flat"))
model.add(tf.keras.layers.Dense(128, activation="relu", name="Dense1"))
model.add(tf.keras.layers.Dense(64, activation="relu", name="Dense2"))
model.add(tf.keras.layers.Dense(2, activation="softmax", name="Output"))

model.summary()

model.compile(optimizer=tf.keras.optimizers.SGD(),
              loss=tf.keras.losses.categorical_crossentropy,
              metrics = ["acc"])

model.fit(train_idg, epochs=21, batch_size=batch_size, validation_data=val_idg)

model.save('My model.h5')

# Images in Test
test_image = "test/dog.10996.jpg"
test_image = cv2.imread(test_image)
test_image = cv2.resize(test_image, (150, 150))
test_image = cv2.cvtColor(test_image, cv2.COLOR_BGR2RGB)
plt.imshow(test_image)
test_image = np.expand_dims(test_image, axis=0)
test_image = test_image / 255.0
test_image.shape

result = model.predict(test_image)

train_idg.class_indices

if result[0][0] < result[0][1]:
  print("Dog")
elif result[0][0] > result[0][1]:
  print("Cat")
else:
  print("Uncertain")